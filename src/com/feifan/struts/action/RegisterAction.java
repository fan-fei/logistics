/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.feifan.struts.action;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import com.feifan.struts.bean.EntityForDownList;
import com.feifan.struts.dao.LogisticsDaoImpl;
import com.feifan.struts.dao.UserDaoBean;
import com.feifan.struts.form.RegisterForm;

/**
 * MyEclipse Struts Creation date: 07-21-2013
 * 
 */
public class RegisterAction extends Action {

	private LogisticsDaoImpl logisticsDaoImpl;

	public LogisticsDaoImpl getLogisticsDaoImpl() {
		return logisticsDaoImpl;
	}

	public void setLogisticsDaoImpl(LogisticsDaoImpl logisticsDaoImpl) {
		this.logisticsDaoImpl = logisticsDaoImpl;
	}

	private static int WIDTH = 65;// 设置图片的宽度

	private static int HEIGHT = 22;// 设置图片的高度

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException {
		RegisterForm registerForm = (RegisterForm) form;// TODO Auto-generated

		// 访问次数计数
		if (!"old".equals(request.getSession().getAttribute("countSession"))) {
			logisticsDaoImpl.updateParam("accessCount");
			String accessCount = logisticsDaoImpl.selectParam("accessCount");
			request.getSession().setAttribute("countSession", "old");
			request.getSession().setAttribute("accessCount", accessCount);
		}

		// 浏览器直接输入http://localhost:8080/register.do时
		if (registerForm.getFormEvent() == null) {
			System.out.println("***************null");
			request.getSession().removeAttribute("shengSession");
			request.getSession().removeAttribute("shiSession");
			return mapping.findForward("init");
		}

		// 画面初始INIT1
		else if (registerForm.getFormEvent().equals("INIT1")) {
			System.out.println("***************INIT1");
			// 取得所有省数据
			ArrayList<EntityForDownList> shengList = logisticsDaoImpl.querySheng();
			// 设定下拉框的省数据
			request.getSession().setAttribute("shengSession", shengList);

			StringBuffer selectOptions = new StringBuffer();
			selectOptions.append("<option value=\"" + "" + "\">" + "" + "</option>\n");
			selectOptions.append(createOptions(shengList));
			response.setCharacterEncoding("UTF-8");
			response.getWriter().println(selectOptions);

			return null;
		}

		// 画面初始INIT2
		else if (registerForm.getFormEvent().equals("INIT2")) {
			System.out.println("***************INIT2");

			StringBuffer selectOptions = new StringBuffer();
			selectOptions.append("<option value=\"" + "" + "\">" + "" + "</option>\n");
			response.setCharacterEncoding("UTF-8");
			response.getWriter().println(selectOptions);

			return null;
		}

		// 获取客服电话
		else if (registerForm.getFormEvent().equals("GETKEFUPHONE")) {
			System.out.println("***************GETKEFUPHONE");
			// 获取客服电话
			response.setCharacterEncoding("UTF-8");
			String data = "注册成功后2天内不和客服联系登录本网的用户，本网将不再保存用户数据。<br>望您尽快与客服人员联系。电话：" + logisticsDaoImpl.selectParam("kefuphone");

			if (request.getSession().getAttribute("accessCount") != null) {
				data = data + "****" + request.getSession().getAttribute("accessCount");
			}
			response.getWriter().print(data);

			return null;
		}

		// 省1数据改变时
		else if (registerForm.getFormEvent().equals("SHENG1CHANGE")) {
			System.out.println("***************SHENG1CHANGE");
			// 取得改变后省所对应市列表
			ArrayList<EntityForDownList> shiList = logisticsDaoImpl.queryShi(registerForm.getSheng1());
			// 设定市列表
			request.getSession().setAttribute("shiSession", shiList);
			StringBuffer selectOptions = new StringBuffer();
			selectOptions.append("<option value=\"" + "" + "\">" + "" + "</option>\n");
			selectOptions.append(createOptions(shiList));
			response.setCharacterEncoding("UTF-8");
			response.getWriter().println(selectOptions);
			return null;
		}
		// 点击验证码图片时
		else if (registerForm.getFormEvent().equals("IMGCODECHANGE")) {
			System.out.println("***************IMGCODECHANGE");
			response.setContentType("image/jpeg");
			response.setHeader("Pragma", "No-cache");
			response.setHeader("Cache-Control", "no-cache");
			response.setDateHeader("Expires", 0);

			BufferedImage image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
			Graphics g = image.getGraphics();

			char[] rands = generateCheckCode();
			drawBackground(g);
			drawRands(g, rands);
			g.dispose();

			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			ImageIO.write(image, "JPEG", bos);
			byte[] buf = bos.toByteArray();
			response.getOutputStream().write(buf);
			request.getSession().setAttribute("randomCode", new String(rands));
			System.out.println(rands);
			return null;
		}

		// 注册时
		else if (registerForm.getFormEvent().equals("REGISTER")) {
			System.out.println("***************REGISTER");
			UserDaoBean userDaoBean = new UserDaoBean();
			userDaoBean.setCompanyname(registerForm.getCompanyname());
			userDaoBean.setUsername(registerForm.getUsername());
			userDaoBean.setPassword(registerForm.getPassword());
			userDaoBean.setRealname(registerForm.getRealname());
			userDaoBean.setShenfenid(registerForm.getShenfenid());
			userDaoBean.setShi_id(registerForm.getShi1());
			userDaoBean.setMobile(registerForm.getMobile());
			userDaoBean.setTelephone(registerForm.getTelephone());
			userDaoBean.setAddress(registerForm.getAddress());

			// 判断 用户名是否存在
			Long count = logisticsDaoImpl.selectUser(registerForm.getUsername());
			if (count != 0) {
				ActionErrors actionErrors = new ActionErrors();
				actionErrors.add("username", new ActionMessage("LOGISTICS_004"));
				this.addErrors(request, actionErrors);
				// 获取客服电话
				registerForm.setKefuphone(logisticsDaoImpl.selectParam("kefuphone"));
				// 返回到本画面
				return mapping.findForward("init");
			}

			// 插入成功，返回自增ID，失败返回0
			logisticsDaoImpl.insertUser(userDaoBean);
		}

		return mapping.findForward("success");
	}

	private StringBuffer createOptions(ArrayList<EntityForDownList> downList) {
		StringBuffer selectOptions = new StringBuffer();
		for (int i = 0; i < downList.size(); i++) {
			selectOptions.append("<option value=\"" + downList.get(i).getId() + "\">" + downList.get(i).getName() + "</option>\n");
		}
		return selectOptions;
	}

	private void drawBackground(Graphics g) {
		g.setColor(new Color(0xDCDCDC));
		g.fillRect(0, 0, WIDTH, HEIGHT);
		for (int i = 0; i < 120; i++) {
			int x = (int) (Math.random() * WIDTH);
			int y = (int) (Math.random() * HEIGHT);
			int red = (int) (Math.random() * 255);
			int green = (int) (Math.random() * 255);
			int blue = (int) (Math.random() * 255);
			g.setColor(new Color(red, green, blue));
			g.drawOval(x, y, 1, 0);
		}
	}

	private void drawRands(Graphics g, char[] rands) {
		// g.setColor(Color.BLUE);
		Random random = new Random();
		int red = random.nextInt(110);
		int green = random.nextInt(50);
		int blue = random.nextInt(50);
		g.setColor(new Color(red, green, blue));
		g.setFont(new Font(null, Font.ITALIC | Font.BOLD, 18));
		g.drawString("" + rands[0], 1, 17);
		g.drawString("" + rands[1], 16, 15);
		g.drawString("" + rands[2], 31, 18);
		g.drawString("" + rands[3], 46, 16);
	}

	private char[] generateCheckCode() {
		String chars = "23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
		char[] rands = new char[4];
		for (int i = 0; i < 4; i++) {
			int rand = (int) (Math.random() * 32);
			rands[i] = chars.charAt(rand);
		}
		return rands;
	}

}